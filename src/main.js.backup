// Import our custom CSS
import './style.css'

// Timeline data for both modes
const timelineData = {
  mentira: [
    {
      year: "1973",
      title: "Plan Z: la UP planea masacrar a 5 000 opositores",
      description: "La prensa oficial reproduce un supuesto documento militar que atribuye al gobierno de Allende un plan de autogolpe para el 19 de septiembre, con listas de enemigos y croquis de cuarteles intervenidos.",
      cta: "VER MENTIRA"
    },
    {
      year: "1975",
      title: "Exterminados como ratones: el MIR se depura con 119 muertos",
      description: "El diario La Segunda afirma que los militantes desaparecidos murieron en peleas internas en el extranjero, basándose en revistas que nadie ha logrado encontrar en los países mencionados.",
      cta: "VER MENTIRA"
    },
    {
      year: "2017",
      title: "Chats de WhatsApp prueban red terrorista mapuche",
      description: "Capturas de pantalla presentadas por Carabineros se emiten en noticieros como prueba irrefutable de coordinación de ataques. Ocho comuneros son detenidos en horario estelar.",
      cta: "VER MENTIRA"
    },
    {
      year: "2018",
      title: "Comunero armado cae en enfrentamiento con GOPE",
      description: "La versión oficial acusa a Camilo Catrillanca de participar en un robo y disparar contra el GOPE. Se afirma que no hay registro audiovisual del operativo.",
      cta: "VER MENTIRA"
    },
    {
      year: "2020",
      title: "Detenido con bidón de bencina es el autor de incendio en Metro Baquedano",
      description: "Imágenes de un joven reducido por Carabineros se viralizan como prueba del ataque. Medios lo presentan como un manifestante violento sorprendido con acelerantes.",
      cta: "VER MENTIRA"
    },
    {
      year: "2021",
      title: "Fans de K-pop organizan atentados y saqueos durante protestas",
      description: "En redes sociales y noticieros se acusa a comunidades K-pop de usar sus plataformas para coordinar hechos de violencia durante el estallido social.",
      cta: "VER MENTIRA"
    }
  ],
  verdad: [
    {
      year: "1973",
      title: "Militares difunden plan sin respaldo documental ni fuentes verificables",
      description: "La Junta informa de un plan atribuido a la UP, pero no exhibe originales ni autores. Partidos opositores y medios extranjeros no encuentran pruebas que sustenten su existencia.",
      cta: "VER VERDAD"
    },
    {
      year: "1975",
      title: "Revistas extranjeras citadas no existen; lista corresponde a detenidos en Chile",
      description: "Investigaciones periodísticas demuestran que las publicaciones no tienen registro. Organismos de derechos humanos vinculan a los 119 nombres con centros de detención chilenos.",
      cta: "VER VERDAD"
    },
    {
      year: "2017",
      title: "Mensajes sin peritaje independiente ni validación técnica",
      description: "Expertos exigen claves hash y metadatos para validar los chats. La fiscalía advierte que los teléfonos fueron manipulados sin supervisión judicial ni acceso de la defensa.",
      cta: "VER VERDAD"
    },
    {
      year: "2018",
      title: "Videos ocultos muestran a Catrillanca desarmado; disparos provienen de Carabineros",
      description: "El estudiante que lo acompañaba desmiente la versión. Las cámaras corporales de la patrulla registraron los hechos, pero los archivos fueron ocultados o eliminados.",
      cta: "VER VERDAD"
    },
    {
      year: "2020",
      title: "Joven detenido no estaba en Metro; pruebas no vinculan presencia ni incendio",
      description: "Reportes confirman que fue arrestado en superficie y no se le hallaron materiales inflamables. Fiscalía no logra acreditar su participación en el siniestro.",
      cta: "VER VERDAD"
    },
    {
      year: "2021",
      title: "No hay evidencia de participación violenta; fans promovieron causas solidarias",
      description: "Análisis de redes descarta llamados a la violencia. Grupos de fans se enfocaron en campañas de ayuda y difusión de derechos humanos, sin vínculo con disturbios.",
      cta: "VER VERDAD"
    }
  ]
};

class DemocraciaFake {
  constructor() {
    this.currentMode = 'mentira'; // Default mode
    this.currentModalYear = null; // Para el modal
    this.currentModalMode = 'mentira'; // Para el switch del modal
    this.init();
  }

  init() {
    this.setupEventListeners();
    this.renderTimeline();
    this.initScrollAnimations();
    this.updateLogo();
    this.initSwitchLabels();
    this.initScrollProgress();
    this.initFloatingNavigation();
    this.initMiniTimeline();
    this.initModalFunctionality();
  }

  initSwitchLabels() {
    // Inicializar labels del switch
    const leftLabel = document.querySelector('.switch-label.left');
    const rightLabel = document.querySelector('.switch-label.right');
    
    if (leftLabel && rightLabel) {
      leftLabel.classList.add('active'); // Mentira está activo por defecto
      rightLabel.classList.remove('active');
    }
  }

  setupEventListeners() {
    // Mode switch principal
    const switchInput = document.getElementById('switchInput');
    switchInput?.addEventListener('change', (e) => {
      console.log('Switch changed:', e.target.checked);
      this.toggleMode(e.target.checked);
    });

    // Floating switch
    const floatingSwitchInput = document.getElementById('floatingSwitchInput');
    floatingSwitchInput?.addEventListener('change', (e) => {
      console.log('Floating switch changed:', e.target.checked);
      this.toggleMode(e.target.checked);
      // Sincronizar con el switch principal
      const mainSwitch = document.getElementById('switchInput');
      if (mainSwitch) {
        mainSwitch.checked = e.target.checked;
      }
    });

    // Modal switch
    const modalSwitchInput = document.getElementById('modalSwitchInput');
    modalSwitchInput?.addEventListener('change', (e) => {
      console.log('Modal switch changed:', e.target.checked);
      this.currentModalMode = e.target.checked ? 'verdad' : 'mentira';
      this.updateModalContent();
      this.updateModalSwitchLabels();
    });

    // CTA button
    const firmaButton = document.getElementById('firmaButton');
    firmaButton?.addEventListener('click', () => {
      alert('Redirigiendo a formulario de suscripción...');
    });

    // Timeline CTA buttons (delegated event listener)
    document.addEventListener('click', (e) => {
      if (e.target.classList.contains('timeline-cta')) {
        e.preventDefault();
        const year = e.target.closest('.timeline-item').querySelector('.timeline-year').textContent;
        this.openVideoModal(year);
      }
    });

    // Video modal event listeners
    const videoModal = document.getElementById('videoModal');
    const videoModalClose = document.getElementById('videoModalClose');
    const videoModalOverlay = document.getElementById('videoModalOverlay');
    
    videoModalClose?.addEventListener('click', () => {
      this.closeModal();
    });

    videoModalOverlay?.addEventListener('click', () => {
      this.closeModal();
    });

    videoModal?.addEventListener('click', (e) => {
      if (e.target === videoModal) {
        this.closeModal();
      }
    });

    // Escape key to close modal
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        this.closeModal();
      }
    });
  }

  toggleMode(isVerdad) {
    console.log('Toggling mode to:', isVerdad ? 'verdad' : 'mentira');
    this.currentMode = isVerdad ? 'verdad' : 'mentira';
    
    // Toggle body class
    document.body.classList.toggle('verdad-mode', isVerdad);
    
    // Update main switch labels
    const leftLabel = document.querySelector('.switch-label.left');
    const rightLabel = document.querySelector('.switch-label.right');
    
    if (leftLabel && rightLabel) {
      leftLabel.classList.toggle('active', !isVerdad);
      rightLabel.classList.toggle('active', isVerdad);
    }

    // Update floating switch labels
    const floatingLeftLabel = document.querySelector('.floating-switch-label.left');
    const floatingRightLabel = document.querySelector('.floating-switch-label.right');
    
    if (floatingLeftLabel && floatingRightLabel) {
      floatingLeftLabel.classList.toggle('active', !isVerdad);
      floatingRightLabel.classList.toggle('active', isVerdad);
    }

    // Sync floating switch
    const floatingSwitch = document.getElementById('floatingSwitchInput');
    if (floatingSwitch) {
      floatingSwitch.checked = isVerdad;
    }
    
    // Update logo
    this.updateLogo();
    
    // Re-render timeline with new data
    this.renderTimeline();
  }

  updateLogo() {
    const logo = document.getElementById('mainLogo');
    if (logo) {
      // Usar las imágenes reales del directorio public
      const logoSrc = this.currentMode === 'mentira' 
        ? 'header-mentira.png' 
        : 'header-verdad.png';
      logo.src = logoSrc;
      logo.alt = `Democracia Fake - ${this.currentMode === 'mentira' ? 'Montaje' : 'Verdad'}`;
    }
  }

  renderTimeline() {
    const timeline = document.getElementById('timeline');
    if (!timeline) return;

    const data = timelineData[this.currentMode];
    
    timeline.innerHTML = '';
    
    data.forEach((item, index) => {
      const timelineItem = document.createElement('div');
      timelineItem.className = 'timeline-item';
      timelineItem.setAttribute('data-year', item.year);
      
      timelineItem.innerHTML = `
        <div class="timeline-circle"></div>
        <div class="timeline-year">${item.year}</div>
        <div class="timeline-content">
          <h3>${item.title}</h3>
          <p>${item.description}</p>
          <button class="timeline-cta" data-year="${item.year}">${item.cta}</button>
        </div>
      `;
      
      timeline.appendChild(timelineItem);
    });

    // Reset animations
    setTimeout(() => {
      this.initScrollAnimations();
    }, 100);
  }

  initFloatingNavigation() {
    const floatingNav = document.getElementById('floatingNav');
    const timelineSection = document.getElementById('verdad-mentira');
    const floatingSwitchInput = document.getElementById('floatingSwitchInput');

    // Sincronizar switches
    if (floatingSwitchInput) {
      floatingSwitchInput.addEventListener('change', (e) => {
        this.toggleMode(e.target.checked);
        // Sincronizar con el switch principal
        const mainSwitch = document.getElementById('switchInput');
        if (mainSwitch) {
          mainSwitch.checked = e.target.checked;
        }
      });
    }

    // Mostrar/ocultar navegación flotante según scroll
    window.addEventListener('scroll', () => {
      if (!floatingNav || !timelineSection) return;
      
      const timelineRect = timelineSection.getBoundingClientRect();
      const isTimelineVisible = timelineRect.top < window.innerHeight && timelineRect.bottom > 0;
      
      if (isTimelineVisible && window.scrollY > 200) {
        floatingNav.classList.add('visible');
      } else {
        floatingNav.classList.remove('visible');
      }
    });
  }

  initMiniTimeline() {
    const miniTimelineContainer = document.querySelector('.mini-timeline-years');
    if (!miniTimelineContainer) return;

    // Obtener todos los años únicos de ambos modos
    const allYears = new Set();
    timelineData.mentira.forEach(item => allYears.add(parseInt(item.year)));
    timelineData.verdad.forEach(item => allYears.add(parseInt(item.year)));
    
    const sortedYears = Array.from(allYears).sort((a, b) => a - b);
    
    // Limpiar contenedor
    miniTimelineContainer.innerHTML = '';
    
    // Crear botones para cada año
    sortedYears.forEach(year => {
      const yearBtn = document.createElement('button');
      yearBtn.className = 'mini-year-btn';
      yearBtn.textContent = year;
      yearBtn.setAttribute('data-year', year);
      
      yearBtn.addEventListener('click', () => {
        this.scrollToYear(year);
        
        // Actualizar botón activo
        document.querySelectorAll('.mini-year-btn').forEach(btn => btn.classList.remove('active'));
        yearBtn.classList.add('active');
      });
      
      miniTimelineContainer.appendChild(yearBtn);
    });
  }

  scrollToYear(year) {
    // Encontrar el elemento del año específico
    const timelineItem = document.querySelector(`[data-year="${year}"]`);
    if (timelineItem) {
      timelineItem.scrollIntoView({ 
        behavior: 'smooth', 
        block: 'center' 
      });
    }
  }

  initModalFunctionality() {
    // Configuración inicial del modal
    const modalSwitchInput = document.getElementById('modalSwitchInput');
    if (modalSwitchInput) {
      modalSwitchInput.checked = false; // Iniciar en modo mentira
    }
  }

  openVideoModal(year) {
    this.currentModalYear = year;
    this.currentModalMode = this.currentMode;
    
    const videoModal = document.getElementById('videoModal');
    const modalTitle = document.getElementById('modalTitle');
    const modalSwitchInput = document.getElementById('modalSwitchInput');
    
    // Configurar título inicial
    this.updateModalContent();
    
    // Configurar switch del modal
    if (modalSwitchInput) {
      modalSwitchInput.checked = this.currentModalMode === 'verdad';
      modalSwitchInput.addEventListener('change', (e) => {
        this.currentModalMode = e.target.checked ? 'verdad' : 'mentira';
        this.updateModalContent();
        this.updateModalSwitchLabels();
      });
    }
    
    this.updateModalSwitchLabels();
    
    if (videoModal) {
      videoModal.classList.add('active');
      document.body.style.overflow = 'hidden';
    }
  }

  updateModalContent() {
    const year = this.currentModalYear;
    const mode = this.currentModalMode;
    
    // Obtener datos de la noticia
    const mentiraIndex = timelineData['mentira'].findIndex(item => item.year === year);
    if (mentiraIndex === -1) return;
    
    const currentData = timelineData[mode][mentiraIndex];
    
    // Actualizar título
    const modalTitle = document.getElementById('modalTitle');
    if (modalTitle) {
      modalTitle.textContent = currentData.title;
    }
    
    // Actualizar video
    const videoIframe = document.getElementById('videoIframe');
    if (videoIframe) {
      const videoUrls = this.getVideoUrlsForYear(year);
      const videoUrl = videoUrls[mode] || videoUrls['mentira'];
      videoIframe.src = videoUrl;
    }
  }

  getVideoUrlsForYear(year) {
    // Videos diferentes para cada modo - usando videos de ejemplo
    const videosByYear = {
      '1973': {
        'mentira': 'https://www.youtube.com/embed/dQw4w9WgXcQ', // Video de "mentira"
        'verdad': 'https://www.youtube.com/embed/oHg5SJYRHA0'   // Video de "verdad" 
      },
      '1975': {
        'mentira': 'https://www.youtube.com/embed/dQw4w9WgXcQ',
        'verdad': 'https://www.youtube.com/embed/oHg5SJYRHA0'
      },
      '2017': {
        'mentira': 'https://www.youtube.com/embed/dQw4w9WgXcQ',
        'verdad': 'https://www.youtube.com/embed/oHg5SJYRHA0'
      },
      '2018': {
        'mentira': 'https://www.youtube.com/embed/dQw4w9WgXcQ',
        'verdad': 'https://www.youtube.com/embed/oHg5SJYRHA0'
      },
      '2020': {
        'mentira': 'https://www.youtube.com/embed/dQw4w9WgXcQ',
        'verdad': 'https://www.youtube.com/embed/oHg5SJYRHA0'
      },
      '2021': {
        'mentira': 'https://www.youtube.com/embed/dQw4w9WgXcQ',
        'verdad': 'https://www.youtube.com/embed/oHg5SJYRHA0'
      }
    };

    return videosByYear[year] || {
      'mentira': 'https://www.youtube.com/embed/dQw4w9WgXcQ',
      'verdad': 'https://www.youtube.com/embed/oHg5SJYRHA0'
    };
  }

  updateModalSwitchLabels() {
    const leftLabel = document.querySelector('.modal-switch-label.left');
    const rightLabel = document.querySelector('.modal-switch-label.right');
    
    if (leftLabel && rightLabel) {
      leftLabel.classList.toggle('active', this.currentModalMode === 'mentira');
      rightLabel.classList.toggle('active', this.currentModalMode === 'verdad');
    }
  }

  closeModal() {
    const modal = document.getElementById('videoModal');
    if (modal) {
      modal.style.display = 'none';
      
      // Clear video content
      const videoContainer = document.getElementById('modalVideoContainer');
      if (videoContainer) {
        videoContainer.innerHTML = '';
      }
      
      // Reset modal state
      this.currentModalYear = null;
      this.currentModalMode = null;
    }
  }

  initScrollProgress() {
    const timeline = document.querySelector('.timeline');
    
    window.addEventListener('scroll', () => {
      if (!timeline) return;
      
      const timelineRect = timeline.getBoundingClientRect();
      const windowHeight = window.innerHeight;
      const timelineHeight = timeline.offsetHeight;
      
      // Calcular progreso del scroll
      const scrollProgress = Math.max(0, Math.min(100, 
        (windowHeight - timelineRect.top) / (timelineHeight + windowHeight) * 100
      ));
      
      timeline.style.setProperty('--scroll-progress', `${scrollProgress}%`);
      timeline.classList.toggle('scrolling', scrollProgress > 0);
      
      // Activar círculos según el progreso
      this.updateTimelineCircles();
    });
  }

  updateTimelineCircles() {
    const timelineItems = document.querySelectorAll('.timeline-item');
    const windowHeight = window.innerHeight;
    
    timelineItems.forEach(item => {
      const circle = item.querySelector('.timeline-circle');
      const rect = item.getBoundingClientRect();
      
      // Activar círculo cuando el item está en el viewport
      if (rect.top < windowHeight * 0.7 && rect.bottom > windowHeight * 0.3) {
        circle.classList.add('active');
      } else {
        circle.classList.remove('active');
      }
    });
  }

  initScrollAnimations() {
    const timelineItems = document.querySelectorAll('.timeline-item');
    
    const observerOptions = {
      threshold: 0.3,
      rootMargin: '0px 0px -100px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate');
        }
      });
    }, observerOptions);

    timelineItems.forEach(item => {
      item.classList.remove('animate');
      observer.observe(item);
    });
  }

  // Parallax effect for timeline (simplified version)
  initParallax() {
    window.addEventListener('scroll', () => {
      const scrolled = window.pageYOffset;
      const timelineContainer = document.querySelector('.timeline-container');
      
      if (timelineContainer) {
        const rect = timelineContainer.getBoundingClientRect();
        if (rect.top < window.innerHeight && rect.bottom > 0) {
          const parallaxSpeed = scrolled * 0.1;
          timelineContainer.style.transform = `translateY(${parallaxSpeed}px)`;
        }
      }
    });
  }
}

// Initialize the application when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  new DemocraciaFake();
});

// Smooth scrolling for anchor links
document.addEventListener('click', (e) => {
  if (e.target.tagName === 'A' && e.target.getAttribute('href')?.startsWith('#')) {
    e.preventDefault();
    const targetId = e.target.getAttribute('href').substring(1);
    const targetElement = document.getElementById(targetId);
    
    if (targetElement) {
      targetElement.scrollIntoView({
        behavior: 'smooth',
        block: 'start'
      });
    }
  }
});
